thing Main includes GatewayCommandMsgs , DisplayMsgs , TimerMsgs {
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	required port gateway {
		sends button_pushed receives clear_screen receives display_digit
	}
	required port display {
		sends create sends destroy sends update sends clear sends setColor sends setBGColor sends drawRect sends fillRect sends drawInteger sends drawThingML receives displayReady receives displayError
	}
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128
	property bgcolor : UInt8 [ 3 ]
	property fgcolor : UInt8 [ 3 ]
	property value : Int16 = 64
	function initColors() do
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		display!setBGColor(bgcolor [0], bgcolor [1], bgcolor [2])
		display!setColor(fgcolor [0], fgcolor [1], fgcolor [2])
	end
	function clearScreen() do
		initColors()
		display!setColor(255, 255, 255)
		display!fillRect(8, 30, 142, 76)
		display!setColor(fgcolor [0], fgcolor [1], fgcolor [2])
		display!fillRect(9, 31, 140, 50)
		display!setBGColor(fgcolor [0], fgcolor [1], fgcolor [2])
		display!drawThingML(26, 87)
		display!update()
	end
	function drawValue() do
		display!setColor(200, 255, 170)
		display!drawInteger(23, 40, value, 5, 6)
		display!update()
	end
	statechart Main init START {
		on entry do
			display!create(XDISPSIZE, YDISPSIZE)
			display!clear()
			initColors()
			clock!timer_start(1, 50)
		end
		state START {
			on entry do
				clearScreen()
			end
			internal
			event gateway?clear_screen
			action do
				clock!timer_start(0, 100)
				value = 0
			end
			internal
			event m : gateway?display_digit
			action do
				value = value * 10 + m.d
				clock!timer_start(0, 100)
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				drawValue()
			end
		}
		internal
		event t : clock?timer_timeout
		guard t.id == 1
		action do
			var a : Int16 = `analogRead(3)`
			if (a > 205 and a < 300) do
				//display!setColor(255, 50, 0)
				display!setColor(2, 50, 250)
				display!drawRect(0, 0, XDISPSIZE - 1, YDISPSIZE - 1)
				display!drawRect(1, 1, XDISPSIZE - 3, YDISPSIZE - 3)
				clock!timer_start(1, 500)
				gateway!button_pushed()
			end
			else do
				display!setColor(0, 0, 0)
				display!drawRect(0, 0, XDISPSIZE - 1, YDISPSIZE - 1)
				display!drawRect(1, 1, XDISPSIZE - 3, YDISPSIZE - 3)
				clock!timer_start(1, 50)
			end
		end
	}
}
thing fragment SerialMsgs {
	message receive_byte(b : Byte)
	message write_byte(b : Byte)
	message print_message(msg : String)
}
thing Serial includes SerialMsgs {
	provided port rx {
		sends receive_byte
	}
	provided port tx {
		receives write_byte receives print_message
	}
	statechart SerialImpl init Receiving {
		state Receiving {
			on entry `Serial.begin(9600);`
			internal guard `Serial.available()` > 0
			action rx!receive_byte(`(char)Serial.read()`)
		}
		internal
		event b : tx?write_byte
		action do
			`Serial.write(` & b.b & `);`
		end
	}
}
thing fragment GatewayCommandMsgs {
	message clear_screen()
	message display_digit(d : Int8)
	message button_pushed()
}
thing GatewayCommandParser includes SerialMsgs , GatewayCommandMsgs {
	required port blerx {
		receives receive_byte
	}
	required port bletx @sync_send "true" {
		sends write_byte sends print_message
	}
	provided port gateway {
		sends clear_screen sends display_digit receives button_pushed
	}
	statechart GatewayCommandParserSC init Ready {
		state Ready {
			internal
			event m : blerx?receive_byte
			guard m.b == `'!'`
			action gateway!clear_screen()
			internal
			event m : blerx?receive_byte
			guard m.b > 47 and m.b < 58
			action gateway!display_digit((m.b - 48))
		}
		internal
		event gateway?button_pushed
		action bletx!write_byte(`'?'`)
	}
}
thing DisplayArduino includes Display @c_header "
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>

#define TFT_CS     10
#define TFT_RST    9
#define TFT_DC     8" @c_global "Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);" {
	property XFRAMESIZE : UInt16
	property YFRAMESIZE : UInt16
	//property color : UInt16 = `ST7735_BLACK`
	property color : UInt16 = `ST7735_WHITE`
	function initDisplay(xsize : UInt8, ysize : UInt8) do
	`tft.initR(INITR_BLACKTAB);
		tft.fillScreen(ST7735_BLACK);
		tft.setRotation(3);`
	end
	function destroyDisplay() do
		clearScreen()
	end
	function clearScreen() do
	`tft.fillScreen(ST7735_BLACK);`
	end
	function setColor(r : UInt8, g : UInt8, b : UInt8) do
		color = `tft.color565(` & r & `, ` & g & `, ` & b & `)`
	end
	function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`tft.drawRect(` & x & `,` & y & `,` & width & `,` & height & `,` & color & `);`
	end
	function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`tft.fillRect(` & x & `,` & y & `,` & width & `,` & height & `,` & color & `);`
	end
	function updateDisplay() do
	end
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true"
	message io_clock()
	@xms_tic "10" message fps_clock()
	@xms_tic "33" message ui_clock()
	@xms_tic "231"
}
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@c_byte_size "1"
object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "2"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
enumeration DigitalState
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
	@scala_type "Byte"
	@SenML_type "Double"
enumeration DigitalState
	@c_type "uint8_t"
	@c_byte_size "1"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
thing fragment DisplayMsgs {
	message clear()
	message setColor(r : UInt8, g : UInt8, b : UInt8)
	message setBGColor(r : UInt8, g : UInt8, b : UInt8)
	message drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	message fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)
	message drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)
	message drawThingML(x : UInt8, y : UInt8)
	message create(xsize : UInt8, ysize : UInt8)
	message destroy()
	message update()
	message displayReady()
	message displayError()
}
thing fragment Display includes DisplayMsgs {
	provided port display {
		sends displayReady sends displayError receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML
	}
	property bg_r : UInt8 = 0
	property bg_g : UInt8 = 0
	property bg_b : UInt8 = 0
	property fg_r : UInt8 = 0
	property fg_g : UInt8 = 0
	property fg_b : UInt8 = 0
	abstract function initDisplay(xsize : UInt8, ysize : UInt8) @abstract "true"

	abstract function destroyDisplay() @abstract "true"

	abstract function updateDisplay() @abstract "true"

	abstract function clearScreen() @abstract "true"

	abstract function setColor(r : UInt8, g : UInt8, b : UInt8) @abstract "true"

	abstract function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) @abstract "true"

	abstract function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) @abstract "true"

	function drawDigit(x : UInt8, y : UInt8, d : UInt8, size : UInt8) do
		if (d < 1) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 2) do
			fillRect(x + size, y, size, 5 * size)
		end
		else if (d < 3) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 4) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x + size, y + 2 * size, 2 * size, size)
		end
		else if (d < 5) do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 6) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 7) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 5 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 8) do
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 9) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
		else do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
	end
	function drawThingML(px : Int16, py : Int16) do
		setColor(255, 255, 255)
		fillRect(px, py, 108, 13)
		var x : Int16 = px + 1
		var y : Int16 = py + 1
		setColor(80, 80, 80)
		fillRect(x + 0, y + 0, 12, 2)
		fillRect(x + 5, y + 0, 2, 11)
		fillRect(x + 18, y + 0, 2, 11)
		fillRect(x + 27, y + 0, 2, 11)
		fillRect(x + 18, y + 5, 11, 2)
		fillRect(x + 36, y + 0, 2, 11)
		fillRect(x + 44, y + 0, 2, 11)
		fillRect(x + 46, y + 1, 1, 3)
		fillRect(x + 47, y + 2, 1, 3)
		fillRect(x + 48, y + 3, 1, 3)
		fillRect(x + 49, y + 4, 1, 3)
		fillRect(x + 50, y + 5, 1, 3)
		fillRect(x + 51, y + 6, 1, 3)
		fillRect(x + 52, y + 7, 1, 3)
		fillRect(x + 53, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 69, y + 5, 5, 2)
		fillRect(x + 72, y + 7, 2, 2)
		//setColor(232, 141, 10)
		setColor(120,232,110)
		fillRect(x + 80, y + 0, 11, 2)
		fillRect(x + 80, y + 0, 2, 11)
		fillRect(x + 85, y + 0, 2, 11)
		fillRect(x + 89, y + 0, 2, 11)
		fillRect(x + 95, y + 0, 2, 11)
		fillRect(x + 95, y + 9, 11, 2)
	end
	function drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8) do
		clearInteger(x, y, digits, scale)
		var val : Int16 = v
		var d : UInt8 = digits
		while (d > 0) do
			drawDigit(x + (d - 1) * 4 * scale, y, val % 10, scale)
			val = val / 10
			d = d - 1
		end
	end
	function clearInteger(x : UInt8, y : UInt8, digits : UInt8, scale : UInt8) do
		setColor(bg_r, bg_g, bg_b)
		fillRect(x, y, (digits * 4 - 1) * scale, 5 * scale)
		setColor(fg_r, fg_g, fg_b)
	end
	statechart SC init Wait {
		state Wait {
			transition -> Running
			event e : display?create
			action initDisplay(e.xsize, e.ysize)
		}
		state Running {
			on entry do
				display!displayReady()
			end
			internal
			event e : display?setColor
			action do
				fg_r = e.r
				fg_g = e.g
				fg_b = e.b
				setColor(e.r, e.g, e.b)
			end
			internal
			event e : display?setBGColor
			action do
				bg_r = e.r
				bg_g = e.g
				bg_b = e.b
			end
			internal
			event e : display?clear
			action clearScreen()
			internal
			event e : display?drawRect
			action drawRect(e.x, e.y, e.width, e.height)
			internal
			event e : display?fillRect
			action fillRect(e.x, e.y, e.width, e.height)
			internal
			event e : display?update
			action updateDisplay()
			internal
			event e : display?drawInteger
			action drawInteger(e.x, e.y, e.v, e.digits, e.scale)
			internal
			event e : display?drawThingML
			action drawThingML(e.x, e.y)
			transition -> Destroyed
			event display?destroy
			action destroyDisplay()
		}
		state Destroyed {
		}
	}
}
protocol Timer ;

protocol Timer ;

configuration MainCfg {
	instance main : Main
	instance disp : DisplayArduino
	instance uart : Serial
	instance gwcmd : GatewayCommandParser
	connector main.clock over Timer
	connector main.display => disp . display
	connector gwcmd.bletx => uart . tx
	connector gwcmd.blerx => uart . rx
	connector main.gateway => gwcmd . gateway
}
